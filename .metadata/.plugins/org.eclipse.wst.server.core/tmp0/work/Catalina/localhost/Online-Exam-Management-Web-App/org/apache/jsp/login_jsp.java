/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-10-20 09:32:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\r\n");
      out.write("    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\r\n");
      out.write("    <link\r\n");
      out.write("      href=\"https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap\"\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("    />\r\n");
      out.write("\r\n");
      out.write("    <link\r\n");
      out.write("      href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\"\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("      integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\"\r\n");
      out.write("      crossorigin=\"anonymous\"\r\n");
      out.write("    />\r\n");
      out.write("    <link\r\n");
      out.write("      rel=\"stylesheet\"\r\n");
      out.write("      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css\"\r\n");
      out.write("    />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"RegistrationAssets/CSS/style.css\" />\r\n");
      out.write("    <link rel=\"shortcut icon\" href=\"RegistrationAssets/IMGS/login.png\" />\r\n");
      out.write("    <script src=\"alert/dist/sweetalert-dev.js\"></script>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"alert/dist/sweetalert.css\">\r\n");
      out.write("    <title>Registration</title>\r\n");
      out.write("  </head>\r\n");
      out.write("\r\n");
      out.write("  <body>\r\n");
      out.write("    <div class=\"container\" id=\"container\">\r\n");
      out.write("      <div class=\"form-container sign-up\">\r\n");
      out.write("        <form action =\"AddStudentServlet\" method =\"post\">\r\n");
      out.write("          <!-- Home button inside the form box -->\r\n");
      out.write("          <a href=\"Home.jsp\" class=\"home-icon\">\r\n");
      out.write("          \r\n");
      out.write("            <i class=\"fa-solid fa-house\"></i>\r\n");
      out.write("          </a>\r\n");
      out.write("          <h1>Register</h1>\r\n");
      out.write("\r\n");
      out.write("          <span>Fill the form to register to the system</span>\r\n");
      out.write("          \r\n");
      out.write("          <input required pattern=\"^[a-zA-Z]+ [a-zA-Z]+$\" type=\"text\" name =\"stName\" placeholder=\"Name\" />\r\n");
      out.write("          <input type=\"email\" name =\"stEmail\" placeholder=\"Email\" />\r\n");
      out.write("          <input type=\"text\" name =\"mobileNumber\" placeholder=\"Mobile Number\" />\r\n");
      out.write("          <input type=\"password\" name =\"password\" placeholder=\"Password\" />\r\n");
      out.write("          <input type=\"password\" placeholder=\"Confirm Password\" />\r\n");
      out.write("          <button>Sign Up</button>\r\n");
      out.write("        </form>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"form-container sign-in\">\r\n");
      out.write("        <form action = \"LoginServlet\" method = \"post\">\r\n");
      out.write("          <!-- Home button inside the form box -->\r\n");
      out.write("          <a href=\"Home.jsp\" class=\"home-icon\">\r\n");
      out.write("            <i class=\"fa-solid fa-house\"></i>\r\n");
      out.write("          </a>\r\n");
      out.write("          <h1>Student Log In</h1>\r\n");
      out.write("\r\n");
      out.write("          <span>Use your Student ID and password to log into the system</span>\r\n");
      out.write("          <input type=\"email\" name =\"stEmail\" placeholder=\"Email\" required />\r\n");
      out.write("          <input type=\"password\" name = \"password\" placeholder=\"Password\"  required />\r\n");
      out.write("          <a href=\"#\">Forget Your Password?</a>\r\n");
      out.write("          <button>Log In</button>\r\n");
      out.write("        </form>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <div class=\"toggle-container\">\r\n");
      out.write("        <div class=\"toggle\">\r\n");
      out.write("          <div class=\"toggle-panel toggle-left\">\r\n");
      out.write("            <p>Already have an account ? Log in..</p>\r\n");
      out.write("            <button class=\"hidden\" id=\"login\">Sign In</button>\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"toggle-panel toggle-right\">\r\n");
      out.write("            <p>Don't have an account ? Register now..</p>\r\n");
      out.write("            <button class=\"hidden\" id=\"register\">Sign Up</button>\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("    const container = document.getElementById('container');\r\n");
      out.write("    const registerBtn = document.getElementById('register');\r\n");
      out.write("    const loginBtn = document.getElementById('login');\r\n");
      out.write("\r\n");
      out.write("    registerBtn.addEventListener('click', () => {\r\n");
      out.write("        container.classList.add(\"active\");\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    loginBtn.addEventListener('click', () => {\r\n");
      out.write("        container.classList.remove(\"active\");\r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.addEventListener(\"DOMContentLoaded\", function () {\r\n");
      out.write("        const form = document.querySelector(\".sign-up form\");\r\n");
      out.write("        const emailInput = form.querySelector('input[placeholder=\"Email\"]');\r\n");
      out.write("      const mobileInput = form.querySelector('input[placeholder=\"Mobile Number\"]');\r\n");
      out.write("        const passwordInput = form.querySelector('input[placeholder=\"Password\"]');\r\n");
      out.write("        const confirmPasswordInput = form.querySelector('input[placeholder=\"Confirm Password\"]');\r\n");
      out.write("        const signUpButton = form.querySelector(\"button\");\r\n");
      out.write("      \r\n");
      out.write("        // Email validation: must include '@'\r\n");
      out.write("        function validateEmail() {\r\n");
      out.write("          const email = emailInput.value;\r\n");
      out.write("          return email.includes(\"@\");\r\n");
      out.write("        }\r\n");
      out.write("      \r\n");
      out.write("        //Mobile number validation: must be exactly 10 digits\r\n");
      out.write("        function validateMobileNumber() {\r\n");
      out.write("          const mobile = mobileInput.value;\r\n");
      out.write("          const mobilePattern = /^[0-9]{10}$/;\r\n");
      out.write("          return mobilePattern.test(mobile);\r\n");
      out.write("        }\r\n");
      out.write("      \r\n");
      out.write("        // Password matching validation\r\n");
      out.write("        function validatePasswordMatch() {\r\n");
      out.write("          return passwordInput.value === confirmPasswordInput.value;\r\n");
      out.write("        }\r\n");
      out.write("      \r\n");
      out.write("        // Add event listener to validate on form submission\r\n");
      out.write("        form.addEventListener(\"submit\", function (e) {\r\n");
      out.write("          let isValid = true;\r\n");
      out.write("      \r\n");
      out.write("          // Validate email\r\n");
      out.write("          if (!validateEmail()) {\r\n");
      out.write("            alert(\"Please enter a valid email address with '@'.\");\r\n");
      out.write("            isValid = false;\r\n");
      out.write("          }\r\n");
      out.write("      \r\n");
      out.write("          //Validate mobile number\r\n");
      out.write("          if (!validateMobileNumber()) {\r\n");
      out.write("            alert(\"Please enter a valid 10-digit mobile number.\");\r\n");
      out.write("            isValid = false;\r\n");
      out.write("          }\r\n");
      out.write("      \r\n");
      out.write("          // Validate password match\r\n");
      out.write("          if (!validatePasswordMatch()) {\r\n");
      out.write("            alert(\"Password and Confirm Password must match.\");\r\n");
      out.write("            isValid = false;\r\n");
      out.write("          }\r\n");
      out.write("      \r\n");
      out.write("          // If any validation fails, prevent form submission\r\n");
      out.write("          if (!isValid) {\r\n");
      out.write("            e.preventDefault();\r\n");
      out.write("          }\r\n");
      out.write("        });\r\n");
      out.write("      \r\n");
      out.write("        // Add input restrictions for mobile number (only digits)\r\n");
      out.write("        mobileInput.addEventListener(\"input\", function () {\r\n");
      out.write("          mobileInput.value = mobileInput.value.replace(/[^0-9]/g, \"\"); // Allow only digits\r\n");
      out.write("        });\r\n");
      out.write("      });\r\n");
      out.write("      \r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
